worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    init_by_lua_block { 
        local ffi = require("ffi")

        ffi.cdef[[
        	typedef long time_t;

        	typedef struct timespec {
              time_t   tv_sec;        
              long     tv_nsec;       
            } timespec;
         
        	int clock_gettime(long, struct timespec *tp);
        	
        ]]
         
        local timespec_struct = ffi.new("timespec")

        function getnsec()
         	ffi.C.clock_gettime(0, timespec_struct)
         	return tonumber(timespec_struct.tv_sec * 1000000000 + timespec_struct.tv_nsec)
        end        
        
    }
    server {
        listen 8080;

        # GET /time
        location = /time {
            content_by_lua_block {
                ngx.say("The current time is ".. string.format("%d",getnsec()));
            }

         }

         # Store JSON data via POST to /set 
         location = /set {
             content_by_lua_block {
                local cjson = require "cjson"
                local data = ""
                local index = 0;

                local start = getnsec();

                local address = ngx.var.remote_addr

                local tags = "ip=".. address
                
                local date = string.format("%d",getnsec())
                
                local function save(series, tags, val)
                    data = data .. "+" .. series .." ".. tags .. "\r\n"
                    data = data .. ":" .. date .."\r\n"  
                    if (type(val) == "number") then
                        data = data .. ":" .. val .. "\r\n"   
                    else
                        data = data .. "+" .. val .. "\r\n"                                                            
                    end
                    index = index+1
                end


                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                value = cjson.decode(body)

                for k,v in pairs(value) do
                    if (type(v) == "table") then
                        for k2,v2 in pairs(v) do
                            save(k2, tags, v2)
                        end
                    else
                        save(k, tags, v)
                    end
                end
                
                local sock, err = ngx.socket.tcp()            
                if not sock then
                    return nil, err
                end

                sock:settimeout(1)
                local tcpsock, err  = sock:connect("127.0.0.1", 8282)
                if not sock then
                    ngx.say("Not connected to database");        
                else
                    -- ngx.say("reused times: ", sock:getreusedtimes())                
                end
                
                local bytes, err = sock:send(data)
                if not bytes then
                    ngx.say("failed to save: ", err)
                    ngx.exit(ngx.HTTP_BAD_REQUEST)
                    return;
                end
                
                -- enable this block if you want to receive errors in ingestion
                -- local line, err = sock:receive()
                -- if line then
                    --ngx.say("store error: ", line)
                    --ngx.exit(ngx.HTTP_BAD_REQUEST)
                    --return;
                -- end
                
                sock:setkeepalive();
             }

         }
    }
}